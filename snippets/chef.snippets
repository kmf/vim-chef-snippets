snippet alternatives
	# https://docs.chef.io/resources/alternatives
	alternatives '${1:name}' do
		link "${_:/usr/bin/LINK_NAME}" 
		link_name                 
		path '${2:path}'         
		priority	                     
		action :${3:install}	   
	end

snippet apt_package
	# https://docs.chef.io/resources/apt_package
	apt_package '${1:name}' do
		default_release				 
		options								 
		overwrite_config_files	${2:false} 
		package_name					 
		response_file					 
		response_file_variables 
		timeout								 
		version								 
		action :${3:install}	 
	end

snippet apt_preference
	# https://docs.chef.io/resources/apt_preference
	apt_preference '${1:name}' do
		glob						
		package_name		
		pin							
		pin_priority		
		action :${2:add} 
	end

snippet apt_repository
	# https://docs.chef.io/resources/apt_repository
	apt_repository '${1:name}' do
		arch                             
		cache_rebuild ${2:true}          
		components                       
		cookbook                         
		deb_src		${3:false}             
		distribution 
		key                              
		key_proxy                        
		keyserver                        
		repo_name                        
		trusted		${4:false}             
		uri                              
		action :${5:add}                 
	end

snippet apt_update
	# https://docs.chef.io/resources/apt_update
	apt_update '${1:name}' do
		frequency ${2:86400}   
		action :${3:periodic}	 
	end

snippet archive_file
	# https://docs.chef.io/resources/archive_file
	archive_file '${1:name}' do
		destination               
		group                     
		mode	"'${2:755}'"        
		options                   
		overwrite ${3:false}      
		owner                     
		path                      
		action :${4:extract}      
	end

snippet bash
	# https://docs.chef.io/resources/bash
	bash '${1:name}' do
		code								 
		creates							 
		cwd									 
		environment					 
		flags								 
		group								 
		path								 
		returns							 
		timeout							 
		user								 
		umask								 
		action :${2:run}					
	end

snippet batch
	# https://docs.chef.io/resources/batch
	batch '${1:name}' do
		architecture				 
		code								 
		command "${2:ls -la}" 
		creates							 
		cwd									 
		flags								 
		group								 
		guard_interpreter		 
		interpreter					 
		returns							 
		timeout							 
		user								 
		password						 
		domain							 
		action :${3:run}					
	end

snippet bff_package
	# https://docs.chef.io/resources/bff_package
	bff_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}
	end

snippet breakpoint
	# https://docs.chef.io/resources/breakpoint
	breakpoint '${1:name}' do
		action :${2:break}
	end

snippet build_essential
	# https://docs.chef.io/resources/build_essential
	build_essential '${1:name}' do
		raise_if_unsupported	${2:false}		
		action :${3:install}								
	end

snippet cab_package
	# https://docs.chef.io/resources/cab_package
	cab_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}
	end

snippet chef_client_config
	# https://docs.chef.io/resources/chef_client_config
	chef_client_config '${1:name}' do
		additional_config				 
		chef_license						 
		chef_server_url					 
		config_directory				 
		event_loggers					   
		exception_handlers			 
		file_backup_path				 
		file_cache_path					 
		file_staging_uses_destdir 
		formatters							 
		ftp_proxy								 
		group										 
		http_proxy							 
		https_proxy							 
		log_level							   
		log_location						 
		minimal_ohai						 
		named_run_list					 
		no_proxy								 
		node_name								 
		ohai_disabled_plugins		 
		ohai_optional_plugins		 
		pid_file								 
		policy_group						 
		policy_name							 
		report_handlers					 
		ssl_verify_mode					 
		start_handlers					 
		user										 
		action :${2:create}			 
	end

snippet chef_client_cron
	# https://docs.chef.io/resources/chef_client_cron
	chef_client_cron '${1:name}' do
		accept_chef_license	${2:false}	 
		append_log_file	${3:true}	 
		chef_binary_path "${4:/opt/chef/bin/chef-client}"	 
		comment						 
		config_directory "${5:/etc/chef}"	 
		daemon_options		 
		day "${6:*}"								 
		environment				 
		hour "${7:*}"							 
		job_name "${8:chef-client}"					 
		log_directory			 
		log_file_name "${9:client.log}"			 
		mailto						 
		minute "${10:0,30}"						 
		month "${11:*}"							 
		nice							 
		splay {12:300}						 
		user "${13:root}"							 
		weekday "${14:*}"						 
		action :${15:add}						 
	end

snippet chef_client_launchd
	# https://docs.chef.io/resources/chef_client_launchd
	chef_client_launchd '${1:name}' do
		accept_chef_license	 ${2:false}		 
		chef_binary_path "${3:/opt/chef/bin/chef-client}"	 
		config_directory "${4:/etc/chef}"	 
		daemon_options		 
		environment				 
		interval					 
		log_directory "${5:/Library/Logs/Chef}"			 
		log_file_name "${6:client.log}"			 
		low_priority_io		${7:true} 
		nice										
		splay										
		user "${8:root}"							 
		working_directory "${9:/var/root}"	 
		action :${10:enable}						 
	end

snippet chef_client_scheduled_task
	# https://docs.chef.io/resources/chef_client_scheduled_task
	chef_client_scheduled_task '${1:name}' do
		accept_chef_license	 ${2:false}		 
		chef_binary_path "${3:C:/opscode/chef/bin/chef-client}"	 
		config_directory "${4:/etc/chef}"	 
		daemon_options		 
		frequency "${5:minute}"					 
		frequency_modifier "${6:30 if frequency is 'minute', 1 otherwise}" 
		log_directory "${7:CONFIG_DIRECTORY/log}"			 
		log_file_name "${8:client.log}"			 
		password					 
		run_on_battery	${9:true}	 
		splay	${10:300}						 
		start_date				 
		start_time				 
		task_name "${11:chef-client}"					 
		user "${12:System}"							 
		action :${13:add}						 
	end

snippet chef_client_systemd_timer
	# https://docs.chef.io/resources/chef_client_systemd_timer
	chef_client_systemd_timer '${1:name}' do
		accept_chef_license	${2:false}		 
		chef_binary_path "${3:/opt/chef/bin/chef-client}"	 
		config_directory "${4:/etc/chef}"	 
		cpu_quota					 
		daemon_options		 
		delay_after_boot "${5:1min}"	 
		description "${6:Chef Infra Client periodic execution}"				 
		environment				 
		interval "${7:30min}"					 
		job_name "${8:chef-client}"					 
		run_on_battery	${9:true}	 
		splay "${10:5min}"							 
		user "${11:root}"							 
		action :${12:add}						 
	end

snippet chef_client_trusted_certificate
	# https://docs.chef.io/resources/chef_client_trusted_certificate
	chef_client_trusted_certificate '${1:name}' do
		cert_name	 
		certificate 
		action :${2:add}					
	end

snippet chef_gem
	# https://docs.chef.io/resources/chef_gem
	chef_gem '${1:name}' do
		clear_sources							
		gem_binary								
		include_default_source		
		options										
		package_name							
		source										
		timeout										
		version										
		action :${2:install}			
	end

snippet chef_handler
	# https://docs.chef.io/resources/chef_handler
	chef_handler '${1:name}' do
		arguments			
		class_name			
		source				
		type					
		action :${2:enable}					
	end

snippet chef_sleep
	# https://docs.chef.io/resources/chef_sleep
	chef_sleep '${1:name}' do
		seconds 
		action :${2:sleep} 
	end

snippet chef_vault_secret
	# https://docs.chef.io/resources/chef_vault_secret
	chef_vault_secret '${1:name}' do
		admins					
		clients					
		data_bag				
		environment			
		id				 
		raw_data				
		search "${_:*:*}"		 
		action :${2:create}		  
	end

snippet chocolatey_config
	# https://docs.chef.io/resources/chocolatey_config
	chocolatey_config '${1:name}' do
		config_key			
		value					
		action :${2:set}	
	end

snippet chocolatey_feature
	# https://docs.chef.io/resources/chocolatey_feature
	chocolatey_feature '${1:name}' do
		feature_name			
		action :${2:enable}				
	end

snippet chocolatey_package
	# https://docs.chef.io/resources/chocolatey_package
	chocolatey_package '${1:name}' do
		list_options		
		options					
		package_name		
		password				
		returns						
		source					
		timeout					
		user						
		version					
		action :${2:install}			 
	end

snippet chocolatey_source
	# https://docs.chef.io/resources/chocolatey_source
	chocolatey_source '${1:name}' do
		admin_only		${2:false}					
		allow_self_service	${3:false}		
		bypass_proxy	${4:false}					
		priority								
		source								
		source_name							
		action :${5:add}				
	end

snippet cookbook_file
	# https://docs.chef.io/resources/cookbook_file
	cookbook_file '${1:name}' do
		atomic_update							
		backup										
		cookbook						 
		force_unlink ${2:false}			
		group								 
		inherits									
		manage_symlink_source	${3:false}		 
		mode								 
		owner								 
		path								 
		rights										
		source							 
		verify							 
		action :${4:create}							  
	end

snippet cron
	# https://docs.chef.io/resources/cron
	cron '${1:name}' do
		command "${3:ls -la}"		
		day "${4:*}"						
		environment			
		home						
		hour "${5:*}"				
		mailto		 
		minute "${6:*}"		
		month "${7:*}"		
		path			 
		shell			 
		time			 
		time_out	 
		user "${8:root}"			 
		weekday		 
		action :${9:create}			
	end

snippet cron_access
	# https://docs.chef.io/resources/cron_access
	cron_access '${1:name}' do
		user			
		action :${2:allow}		 
	end

snippet cron_d
	# https://docs.chef.io/resources/cron_d
	cron_d '${1:name}' do
		command "${2:ls -la}"							
		comment							
		cron_name							
		day "${2:*}"					
		environment						
		home								
		hour "${3:*}"									
		mailto							
		minute "${4:*}"				
		mode								
		month "${5:*}"				
		path								
		predefined_value		
		random_delay					
		shell								
		time_out							
		user "${6:root}"									
		weekday								
		action :${7:create}		
	end

snippet csh
	# https://docs.chef.io/resources/csh
	csh '${1:name}' do
		code								 
		creates							 
		cwd									 
		environment					 
		flags								 
		group								 
		path								 
		returns							 
		timeout							 
		user								 
		umask								 
		action :${2:run}						
	end

snippet directory
	# https://docs.chef.io/resources/directory
	directory '${1:name}' do
		group								 
		inherits									
		mode								 
		owner								 
		path								 
		recursive									
		rights										
		action :${2:create}					
	end

snippet dmg_package
	# https://docs.chef.io/resources/dmg_package
	dmg_package '${1:name}' do
		accept_eula	${2:false}			
		allow_untrusted	${3:false}	
		app						 
		checksum						
		destination "${4:/Applications}"		 
		dmg_name			 
		dmg_passphrase			
		file					 
		headers							
		owner					 
		package_id					
		source				 
		type "${5:app}"					 
		volumes_dir		 
		action :${6:install}		
	end

snippet dnf_package
	# https://docs.chef.io/resources/dnf_package
	dnf_package '${1:name}' do
		arch						
		flush_cache			
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}			
	end

snippet dpkg_package
	# https://docs.chef.io/resources/dpkg_package
	dpkg_package '${1:name}' do
		options								 
		package_name					 
		response_file					 
		response_file_variables 
		source								 
		timeout								 
		version								 
		action :${2:install}					
	end

snippet dsc_resource
	# https://docs.chef.io/resources/dsc_resource
	dsc_resource '${1:name}' do
		module_name					 
		module_version			 
		property						 
		reboot_action				 
		resource						 
		timeout							 
		action :${2:run}						
	end

snippet dsc_script
	# https://docs.chef.io/resources/dsc_script
	dsc_script '${1:name}' do
		code								 
		command "${2:ls -la}"							 
		configuration_data	 
		configuration_data_script  
		configuration_name	 
		cwd									 
		environment					 
		flags								 
		imports							 
		timeout							 
		action :${3:run}						
	end

snippet execute
	# https://docs.chef.io/resources/execute
	execute '${1:name}' do
		command "${2:ls -la}"				
		creates		 
		cwd				 
		default_env	${3:false}		
		domain		 
		elevated	${4:false}			
		environment 
		group			 
		input			 
		live_stream	${5:false}		
		password	 
		returns		 
		sensitive	 
		timeout		 
		umask			 
		user			 
		action :${6:run}	
	end

snippet file
	# https://docs.chef.io/resources/file
	file '${1:name}' do
		atomic_update							
		backup										
		checksum									
		content										
		force_unlink							
		group											
		inherits									
		manage_symlink_source			
		mode											
		owner											
		path '${2:name}' 
		rights										
		verify										
		action :${3:create}					
	end

snippet freebsd_package
	# https://docs.chef.io/resources/freebsd_package
	freebsd_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}		
	end

snippet gem_package
	# https://docs.chef.io/resources/gem_package
	gem_package '${1:name}' do
		clear_sources							
		gem_binary								
		include_default_source		
		options										
		package_name							
		source										
		timeout										
		version										
		action :${2:install}								 
	end

snippet git
	# https://docs.chef.io/resources/git
	git '${1:name}' do
		additional_remotes		
		checkout_branch				
		depth									
		destination							
		enable_checkout		${2:true}			
		enable_submodules	${3:false}		
		environment						
		group									
		remote "${4:origin}"									
		repository						
		revision "${5:HEAD}"								
		ssh_wrapper						
		timeout								
		user									
		action :${6:sync}			
	end

snippet homebrew_cask
	# https://docs.chef.io/resources/homebrew_cask
	homebrew_cask '${1:name}' do
		cask_name		 
		homebrew_path "${2:/usr/local/bin/brew}" 
		install_cask ${3:true}		
		options			 
		owner				 
		action :${4:install}		
	end

snippet homebrew_package
	# https://docs.chef.io/resources/homebrew_package
	homebrew_package '${1:name}' do
		homebrew_user			
		options						
		package_name			
		source						
		timeout						
		version						
		action :${2:install}						
	end

snippet homebrew_tap
	# https://docs.chef.io/resources/homebrew_tap
	homebrew_tap '${1:name}' do
		full	 ${2:false}					
		homebrew_path "${3:/usr/local/bin/brew}" 
		owner				 
		tap_name		 
		url					 
		action :${4:tap}		
	end

snippet homebrew_update
	# https://docs.chef.io/resources/homebrew_update
	homebrew_update '${1:name}' do
		frequency	86400		
		action :${2:periodic}	  
	end

snippet hostname
	# https://docs.chef.io/resources/hostname
	hostname '${1:name}' do
		aliases							
		compile_time ${2:true}		
		hostname						
		ipaddress						
		windows_reboot	${3:true}
		action :${4:set}					
	end

snippet http_request
	# https://docs.chef.io/resources/http_request
	http_request '${1:name}' do
		headers										
		message										
		url		'${2:http://somehost}'							 
		action :${3:get}						
	end

snippet ifconfig
	# https://docs.chef.io/resources/ifconfig
	ifconfig '${1:name}' do
		bcast						
		bonding_opts		
		bootproto				
		bridge					
		device					
		ethtool_opts		
		family "${2:inet}"						
		gateway					
		hwaddr					
		inet_addr				
		mask						
		master					
		metric					
		mtu							
		network					
		onboot					
		onparent				
		slave						
		target						
		vlan						
		action :${3:add}	
	end

snippet ips_package
	# https://docs.chef.io/resources/ips_package
	ips_package '${1:name}' do
		accept_license	${2:false}	
		options							 
		package_name				 
		source							 
		timeout							 
		version							 
		action :${3:install}				
	end

snippet kernel_module
	# https://docs.chef.io/resources/kernel_module
	kernel_module '${1:name}' do
		load_dir "${2:/etc/modules-load.d}"				
		modname					
		options					
		unload_dir "${3:/etc/modprobe.d}"			
		action :${4:install}					
	end

snippet ksh
	# https://docs.chef.io/resources/ksh
	ksh '${1:name}' do
		code								 
		creates							 
		cwd									 
		environment					 
		flags								 
		group								 
		path								 
		returns							 
		timeout							 
		user								 
		umask								 
		action :${2:run}						
	end

snippet launchd
	# https://docs.chef.io/resources/launchd
	launchd '${1:name}' do
		abandon_process_group	${2:false}		
		backup													
		cookbook											
		debug					${3:false}				
		disabled				${4:false}			
		enable_globbing									
		enable_transactions							
		environment_variables						
		exit_timeout										
		group													
		hard_resource_limits						
		inetd_compatibility							
		init_groups											
		keep_alive											
		label														
		launch_events										
		launch_only_once								
		ld_group											
		limit_load_from_hosts						
		limit_load_to_hosts							
		limit_load_to_session_type			
		low_priority_io									
		mach_services										
		mode													
		nice														
		on_demand												
		owner													
		path													
		plist_hash										
		process_type									
		program												
		program_arguments							
		queue_directories							
		root_directory								
		run_at_load										
		session_type									
		sockets												
		soft_resource_limits					
		source												
		standard_error_path						
		standard_in_path							
		standard_out_path							
		start_calendar_interval				
		start_interval								
		start_on_mount								
		throttle_interval							
		time_out											
		type "${5:daemon}"														
		umask													
		username											
		wait_for_debugger							
		watch_paths										
		working_directory							
		action :${6:create}						
	end

snippet link
	# https://docs.chef.io/resources/link
	link '${1:name}' do
		group			 
		link_type	 
		mode			 
		owner			 
		target_file 
		to				 
		action :${2:create}		
	end

snippet locale
	# https://docs.chef.io/resources/locale
	locale '${1:name}' do
		lang			
		lc_env		
		action :${2:update}		
	end

snippet macos_userdefaults
	# https://docs.chef.io/resources/macos_userdefaults
	macos_userdefaults '${1:name}' do
		domain			
		host			
		key				
		sudo		${2:false}		
		type			
		user			
		value				
		action :${3:write}		
	end

snippet macports_package
	# https://docs.chef.io/resources/macports_package
	macports_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}		
	end

snippet mdadm
	# https://docs.chef.io/resources/mdadm
	mdadm '${1:name}' do
		bitmap					
		chunk						
		devices					
		layout					
		level						
		metadata "${2:0.90}"	 
		raid_device 
		action :${3:create}			
	end

snippet mount
	# https://docs.chef.io/resources/mount
	mount '${1:name}' do
		device		 
		device_type 
		domain		 
		dump			 
		enabled ${2:false}		
		fsck_device "${3:-}" 
		fstype "${4:auto}"		 
		mount_point 
		options		 
		pass			 
		password	 
		supports	 
		username	 
		action :${5:mount}					
	end

snippet msu_package
	# https://docs.chef.io/resources/msu_package
	msu_package '${1:name}' do
		checksum				
		options					
		package_name		
		source					
		timeout	${2:3600}				
		action :${3:install}	
	end

snippet notify_group
	# https://docs.chef.io/resources/notify_group
	notify_group '${1:name}' do
		action :${2:nothing}	
	end

snippet ohai
	# https://docs.chef.io/resources/ohai
	ohai '${1:name}' do
		plugin		
		action :${2:reload} 
	end

snippet ohai_hint
	# https://docs.chef.io/resources/ohai_hint
	ohai_hint '${1:name}' do
		compile_time	${2:true} 		
		content					
		hint_name					
		action :${3:create}					
	end

snippet openbsd_package
	# https://docs.chef.io/resources/openbsd_package
	openbsd_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}		
	end

snippet openssl_dhparam
	# https://docs.chef.io/resources/openssl_dhparam
	openssl_dhparam '${1:name}' do
		generator			
		group					
		key_length		
		mode "${2:0640}"			
		owner					
		path						
		action :${3:create}			
	end

snippet openssl_ec_private_key
	# https://docs.chef.io/resources/openssl_ec_private_key
	openssl_ec_private_key '${1:name}' do
		force		${2:false}				
		group					
		key_cipher "${3:des3}"			
		key_curve "${4:prime256v1}"				
		key_pass			
		mode "${5:0600}"						
		owner					
		path						
		action :${6:create}				
	end

snippet openssl_ec_public_key
	# https://docs.chef.io/resources/openssl_ec_public_key
	openssl_ec_public_key '${1:name}' do
		group							 
		mode "${2:0640}"					
		owner							 
		path							 
		private_key_content 
		private_key_pass	 
		private_key_path	 
		action :${3:create}				
	end

snippet openssl_rsa_private_key
	# https://docs.chef.io/resources/openssl_rsa_private_key
	openssl_rsa_private_key '${1:name}' do
		force	${2:false}					
		group					
		key_cipher "${3:des3}"			
		key_length			
		key_pass			
		mode "${4:0600}"					
		owner					
		path						
		action :${5:create}				
	end

snippet openssl_rsa_public_key
	# https://docs.chef.io/resources/openssl_rsa_public_key
	openssl_rsa_public_key '${1:name}' do
		group							 
		mode "${2:0640}"					
		owner							 
		path							 
		private_key_content 
		private_key_pass	 
		private_key_path	 
		action :${3:create}				
	end

snippet openssl_x509_certificate
	# https://docs.chef.io/resources/openssl_x509_certificate
	openssl_x509_certificate '${1:name}' do
		ca_cert_file			 
		ca_key_file				 
		ca_key_pass				 
		city							 
		common_name				 
		country						 
		csr_file					 
		email							 
		expire						 
		extensions				 
		group							 
		key_curve "${2:prime256v1}"					 
		key_file					 
		key_length				 
		key_pass					 
		key_type "${3:rsa}"					 
		mode							 
		org								 
		org_unit					 
		owner							 
		path							 
		renew_before_expiry 
		state							 
		subject_alt_name	 
		action :${4:create}				
	end

snippet openssl_x509_crl
	# https://docs.chef.io/resources/openssl_x509_crl
	openssl_x509_crl '${1:name}' do
		ca_cert_file					
		ca_key_file						
		ca_key_pass						
		expire								
		group						 
		mode									
		owner						 
		path						 
		renewal_threshold			
		revocation_reason			
		serial_to_revoke			
		action :${2:create}			
	end

snippet openssl_x509_request
	# https://docs.chef.io/resources/openssl_x509_request
	openssl_x509_request '${1:name}' do
		city			 
		common_name 
		country		 
		email			 
		group			 
		key_curve "${2:prime256v1}"	 
		key_file	 
		key_length 
		key_pass	 
		key_type "${3:ec}"	 
		mode			 
		org				 
		org_unit	 
		owner			 
		path			 
		state			 
		action :${4:create}		
	end

snippet osx_profile
	# https://docs.chef.io/resources/osx_profile
	osx_profile '${1:name}' do
		identifier			
		profile					
		profile_name			
		action :${2:install}	
	end

snippet package
	# https://docs.chef.io/resources/package
	package '${1:name}' do
		allow_downgrade						
		arch								 
		default_release						
		flush_cache								
		gem_binary					 
		homebrew_user				 
		notifies						 
		options							 
		package_name				 
		response_file				 
		response_file_variables		
		source							 
		subscribes					 
		timeout							 
		version							 
		action :${2:install}				
	end

snippet pacman_package
	# https://docs.chef.io/resources/pacman_package
	pacman_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}				
	end

snippet paludis_package
	# https://docs.chef.io/resources/paludis_package
	paludis_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}			 
	end

snippet perl
	# https://docs.chef.io/resources/perl
	perl '${1:name}' do
		code								 
		creates							 
		cwd									 
		environment								
		flags								 
		group								 
		notifies						 
		path											
		returns										
		subscribes								
		timeout										
		user								 
		umask								 
		action :${2:run}						
	end

snippet plist
	# https://docs.chef.io/resources/plist
	plist '${1:name}' do
		encoding "${2:binary}"			
		entry				
		group "${3:wheel}"					
		mode				
		owner "${4:root}"					
		path					
		value					
		action :${5:set}				
	end

snippet portage_package
	# https://docs.chef.io/resources/portage_package
	portage_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}			
	end

snippet powershell_package_source
	# https://docs.chef.io/resources/powershell_package_source
	powershell_package_source '${1:name}' do
		provider_name "${2:NuGet}"					 
		publish_location					
		script_publish_location		
		script_source_location		
		source_name						 
		trusted										
		url										 
		action :${3:register}			
	end

snippet powershell_script
	# https://docs.chef.io/resources/powershell_script
	powershell_script '${1:name}' do
		code											
		command "${2:ls -la}"										
		convert_boolean_return ${3:false}		
		creates										
		cwd												
		domain										
		elevated ${4:false}					
		environment									
		flags											
		group											
		input											
		interpreter "${5:powershell}"									
		live_stream	${6:false}				
		password									
		returns										
		sensitive									
		timeout										
		user											
		action :${7:run}					
	end

snippet python
	# https://docs.chef.io/resources/python
	python '${1:name}' do
		code			 
		command "${2:ls -la}"		 
		creates		 
		cwd				 
		default_env	${3:false}		  
		domain		 
		elevated ${4:false}	  
		environment 
		flags			 
		group			 
		interpreter 
		live_stream ${5:false}  
		password	 
		returns		 
		sensitive ${6:false}	  
		timeout		 
		umask			 
		user			 
		action :${7:run}		  
	end

snippet reboot
	# https://docs.chef.io/resources/reboot
	reboot '${1:name}' do
		delay_mins			
		reason "${2:Reboot by Chef Infra Client}"					
		action :${3:nothing}	
	end

snippet remote_directory
	# https://docs.chef.io/resources/remote_directory
	remote_directory '${1:name}' do
		cookbook						 
		files_backup							
		files_group					 
		files_mode					 
		files_owner					 
		group								 
		inherits									
		mode								 
		overwrite	${2:true}					
		owner								 
		path								 
		purge											
		recursive									
		rights										
		source							 
		action :${3:create}					
	end

snippet remote_file
	# https://docs.chef.io/resources/remote_file
	remote_file '${1:name}' do
		atomic_update							
		authentication			 
		backup										
		checksum						 
		content							 
		diff								 
		force_unlink	${2:false}		
		ftp_active_mode	${3:false}	
		group								 
		headers										
		inherits									
		manage_symlink_source			
		mode								 
		notifies						 
		owner								 
		path								 
		rights										
		source							 
		subscribes					 
		use_conditional_get				
		verify							 
		remote_domain				 
		remote_password						
		remote_user					 
		show_progress	${4:false}		
		use_etag		${5:true}				
		use_last_modified	${6:true	
		sensitive		${7:false}			
		verifications							
		action :${8:create}					
	end

snippet rhsm_errata
	# https://docs.chef.io/resources/rhsm_errata
	rhsm_errata '${1:name}' do
		errata_id 
		action :${2:install}				
	end

snippet rhsm_errata_level
	# https://docs.chef.io/resources/rhsm_errata_level
	rhsm_errata_level '${1:name}' do
		errata_level			
		action :${2:install}				
	end

snippet rhsm_register
	# https://docs.chef.io/resources/rhsm_register
	rhsm_register '${1:name}' do
		activation_key						
		auto_attach	${2:false}		
		environment					 
		force											
		https_for_ca_consumer ${3:false}  
		install_katello_agent ${4:true}  
		organization				 
		password						 
		satellite_host						
		system_name					 
		username						 
		action :${5:register}			
	end

snippet rhsm_repo
	# https://docs.chef.io/resources/rhsm_repo
	rhsm_repo '${1:name}' do
		repo_name 
		action :${2:enable}		
	end

snippet rhsm_subscription
	# https://docs.chef.io/resources/rhsm_subscription
	rhsm_subscription '${1:name}' do
		pool_id 
		action :${2:attach}		
	end

snippet route
	# https://docs.chef.io/resources/route
	route '${1:name}' do
		comment				
		device				
		gateway				
		metric				
		netmask				
		route_type		
		target					
		action :${2:add}			
	end

snippet rpm_package
	# https://docs.chef.io/resources/rpm_package
	rpm_package '${1:name}' do
		allow_downgrade	${2:true}
		options				 
		package_name	 
		source				 
		timeout				 
		version				 
		action :${3:install}	
	end

snippet ruby
	# https://docs.chef.io/resources/ruby
	ruby '${1:name}' do
		code								 
		creates							 
		cwd									 
		environment								
		flags								 
		group								 
		path											
		returns										
		timeout										
		user								 
		umask								 
		action :${2:run}					
	end

snippet ruby_block
	# https://docs.chef.io/resources/ruby_block
	ruby_block '${1:name}' do
		block											
		block_name					 
		action :${2:run}					
	end

snippet script
	# https://docs.chef.io/resources/script
	script '${1:name}' do
		code								 
		creates							 
		cwd									 
		environment								
		flags								 
		group								 
		interpreter					 
		path											
		returns										
		timeout										
		user								 
		password						 
		domain							 
		umask								 
		action :${2:run}					
	end

snippet service
	# https://docs.chef.io/resources/service
	service '${1:name}' do
		init_command	 
		options				 
		parameters		 
		pattern				 
		priority			 
		reload_command 
		restart_command 
		run_levels		 
		service_name	 
		start_command	 
		status_command 
		stop_command	 
		supports			 
		timeout				 
		user					 
		action :${2:nothing}	
	end

snippet smartos_package
	# https://docs.chef.io/resources/smartos_package
	smartos_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}			 
	end

snippet snap_package
	# https://docs.chef.io/resources/snap_package
	snap_package '${1:name}' do
		channel "${2:stable}"						
		options					
		package_name		
		source					
		timeout					
		version					
		action :${3:install}			
	end

snippet solaris_package
	# https://docs.chef.io/resources/solaris_package
	solaris_package '${1:name}' do
		options					
		package_name		
		source					
		timeout					
		version					
		action :${2:install}			
	end

snippet ssh_known_hosts_entry
	# https://docs.chef.io/resources/ssh_known_hosts_entry
	ssh_known_hosts_entry '${1:name}' do
		file_location "${2:/etc/ssh/ssh_known_hosts}" 
		group				 
		hash_entries 
		host				 
		key					 
		key_type "${3:rsa}"		 
		mode "${4:0644}"				 
		owner				 
		port				 
		timeout			 
		action :${5:create}		
	end

snippet subversion
	# https://docs.chef.io/resources/subversion
	subversion '${1:name}' do
		destination	 
		environment	 
		group				 
		repository	 
		revision "${2:HEAD}"		 
		svn_arguments 
		svn_binary	 
		svn_info_args 
		svn_password 
		svn_username 
		timeout			 
		user				 
		action :${3:sync}		
	end

snippet sudo
	# https://docs.chef.io/resources/sudo
	sudo '${1:name}' do
		command_aliases "${2:[ls -la]}"	  
		commands "${3:["ALL]}"				  
		config_prefix "${4:Prefix values based on the node's platform}"		 
		defaults				  
		env_keep_add		  
		env_keep_subtract  
		filename				 
		groups					 
		host "${5:ALL}"						 
		noexec	${6:false}				  
		nopasswd ${7:false}				  
		runas "${9:ALL}"						 
		setenv	${10:false}				  
		template				 
		users						 
		variables				 
		visudo_binary "${11:/usr/sbin/visudo}"		 
		action :${12:create}					  
	end

snippet swap_file
	# https://docs.chef.io/resources/swap_file
	swap_file '${1:name}' do
		path						
		persist					
		size						
		swappiness			
		timeout					
		action :${2:create}		
	end

snippet sysctl
	# https://docs.chef.io/resources/sysctl
	sysctl '${1:name}' do
		comment						
		conf_dir "${2:/etc/sysctl.d}"					
		ignore_error ${3:false}			
		key								
		value							
		action :${4:apply}	
	end

snippet systemd_unit
	# https://docs.chef.io/resources/systemd_unit
	systemd_unit '${1:name}' do
		content				 
		triggers_reload ${2:false}			
		unit_name			 
		user					 
		verify ${3:false}				 
		action :${4:nothing}						
	end

snippet template
	# https://docs.chef.io/resources/template
	template '${1:name}' do
		atomic_update							
		backup										
		cookbook						 
		force_unlink							
		group								 
		helper(:method)						
		helpers(module)						
		inherits									
		local											
		manage_symlink_source			
		mode								 
		owner								 
		path								 
		rights										
		sensitive									
		source							 
		variables									
		verify							 
		action :${2:create}					
	end

snippet timezone
	# https://docs.chef.io/resources/timezone
	timezone '${1:name}' do
		timezone			
		action :${2:set}				
	end

snippet user
	# https://docs.chef.io/resources/user
	user '${1:name}' do
		comment							 
		force											
		gid									 
		home								 
		iterations								
		manage_home								
		non_unique								
		password						 
		salt								 
		shell								 
		system										
		uid												
		username						 
		action :${2:create}					
	end


snippet user_ulimit
	# https://docs.chef.io/resources/user_ulimit
	user_ulimit '${1:name}' do
		core_hard_limit						
		core_limit					 
		core_soft_limit						
		filehandle_hard_limit			
		filehandle_limit					
		filehandle_soft_limit			
		filename						 
		memory_limit				 
		process_hard_limit				
		process_limit				 
		process_soft_limit				
		rtprio_hard_limit					
		rtprio_limit				 
		rtprio_soft_limit					
		stack_hard_limit					
		stack_limit					 
		stack_soft_limit					
		username						 
		virt_limit					 
		action :${2:create}					
	end

snippet windows_ad_join
	# https://docs.chef.io/resources/windows_ad_join
	windows_ad_join '${1:name}' do
		domain_name		 
		domain_password 
		domain_user		 
		new_hostname	 
		ou_path				 
		reboot				 
		reboot_delay	 
		workgroup_name 
		action :${2:join}			
	end

snippet windows_audit_policy
	# https://docs.chef.io/resources/windows_audit_policy
	windows_audit_policy '${1:name}' do
		audit_base_directories 
		audit_base_objects		 
		crash_on_audit_fail		 
		exclude_user					 
		failure								 
		full_privilege_auditing 
		include_user					 
		subcategory						 
		success								 
		action :${2:set}							
	end

snippet windows_auto_run
	# https://docs.chef.io/resources/windows_auto_run
	windows_auto_run '${1:name}' do
		args						
		path						
		program_name			
		root							
		action :${2:create}			
	end

snippet windows_certificate
	# https://docs.chef.io/resources/windows_certificate
	windows_certificate '${1:name}' do
		cert_path			 
		exportable ${2:false}			
		pfx_password	 
		private_key_acl 
		source				 
		store_name "${3:MY}"		 
		user_store	${4:false}	 
		action :${5:create}							
	end

snippet windows_dfs_folder
	# https://docs.chef.io/resources/windows_dfs_folder
	windows_dfs_folder '${1:name}' do
		description				
		folder_path					
		namespace_name		
		target_path				
		action :${2:create}				
	end

snippet windows_dfs_namespace
	# https://docs.chef.io/resources/windows_dfs_namespace
	windows_dfs_namespace '${1:name}' do
		change_users			
		description				
		full_users				
		namespace_name		
		read_users				
		root "${2:C:\\DFSRoots}"								
		action :${3:create}				
	end

snippet windows_dfs_server
	# https://docs.chef.io/resources/windows_dfs_server
	windows_dfs_server '${1:name}' do
		enable_site_costed_referrals ${2:false}			
		ldap_timeout_secs									
		prefer_login_dc	${3:false}					
		sync_interval_secs								
		use_fqdn ${4:false}													
		action :${5:configure}											
	end

snippet windows_dns_record
	# https://docs.chef.io/resources/windows_dns_record
	windows_dns_record '${1:name}' do
		dns_server "${2:localhost}" 
		record_name 
		record_type "${3:ARecord}" 
		target		 
		zone			 
		action :${4:create}		 
	end

snippet windows_dns_zone
	# https://docs.chef.io/resources/windows_dns_zone
	windows_dns_zone '${1:name}' do
		replication_scope "${2:Domain}" 
		server_type "${3:Domain}"			 
		zone_name				 
		action :${4:create}						
	end

snippet windows_env
	# https://docs.chef.io/resources/windows_env
	windows_env '${1:name}' do
		delim				
		key_name			
		user "${2:<System>}"					
		value				
		action :${3:create}				
	end

snippet windows_feature
	# https://docs.chef.io/resources/windows_feature
	windows_feature '${1:name}' do
		all	${2:false}							
		feature_name					
		install_method				
		management_tools ${3:false}			
		source							
		timeout							
		action :${4:install}		
	end

snippet windows_feature_dism
	# https://docs.chef.io/resources/windows_feature_dism
	windows_feature_dism '${1:name}' do
		all	${2:false}				
		feature_name			
		source					
		timeout						
		action :${3:install}		
	end

snippet windows_feature_powershell
	# https://docs.chef.io/resources/windows_feature_powershell
	windows_feature_powershell '${1:name}' do
		all	${2:false}					
		feature_name					
		management_tools ${3:false} 
		source							
		timeout								
		action :${4:install}		
	end

snippet windows_firewall_profile
	# https://docs.chef.io/resources/windows_firewall_profile
	windows_firewall_profile '${1:name}' do
		allow_inbound_rules						
		allow_local_firewall_rules		
		allow_local_ipsec_rules				
		allow_unicast_response				
		allow_user_apps								
		allow_user_ports							
		default_inbound_action				
		default_outbound_action				
		display_notification					
		profile												
		action :${2:enable}						
	end

snippet windows_firewall_rule
	# https://docs.chef.io/resources/windows_firewall_rule
	windows_firewall_rule '${1:name}' do
		description					
		direction						
		displayname		 
		enabled	${2:false}		
		firewall_action			
		group					 
		icmp_type						
		interface_type			
		local_address				
		local_port					
		profile							
		program				 
		protocol "${3:TCP}"			 
		remote_address			
		remote_port					
		rule_name			 
		service				 
		action :${4:create}		
	end

snippet windows_font
	# https://docs.chef.io/resources/windows_font
	windows_font '${1:name}' do
		font_name 
		source	 
		action :${2:install}				
	end

snippet windows_package
	# https://docs.chef.io/resources/windows_package
	windows_package '${1:name}' do
		checksum									
		installer_type						
		options										
		package_name							
		remote_file_attributes		
		returns										
		source "${2:The resource block's name}"											
		timeout										
		version										
		action :${3:install}				
	end

snippet windows_pagefile
	# https://docs.chef.io/resources/windows_pagefile
	windows_pagefile '${1:name}' do
		automatic_managed ${2:false}		
		initial_size		 
		maximum_size		 
		path						 
		system_managed	 
		action :${3:set}				
	end

snippet windows_path
	# https://docs.chef.io/resources/windows_path
	windows_path '${1:name}' do
		path			
		action :${2:add}		
	end

snippet windows_printer
	# https://docs.chef.io/resources/windows_printer
	windows_printer '${1:name}' do
		comment					
		default		${2:false}	 
		device_id					
		driver_name			
		ipv4_address		
		location				
		share_name			
		shared	${3:false}		
		action :${4:create}		
	end

snippet windows_printer_port
	# https://docs.chef.io/resources/windows_printer_port
	windows_printer_port '${1:name}' do
		ipv4_address					
		port_description		
		port_name						
		port_number						
		port_protocol					
		snmp_enabled ${2:false}		
		action :${3:create}				
	end

snippet windows_security_policy
	# https://docs.chef.io/resources/windows_security_policy
	windows_security_policy '${1:name}' do
		secoption 
		secvalue 
		action :${2:set}				
	end

snippet windows_service
	# https://docs.chef.io/resources/windows_service
	windows_service '${1:name}' do
		binary_path_name		
		delayed_start ${2:false}	
		dependencies				
		description					
		desired_access			
		display_name				
		error_control				
		init_command				
		load_order_group		
		pattern							
		reload_command			
		restart_command			
		run_as_password			
		run_as_user "${3:LocalSystem}"						
		service_name					
		service_type				
		start_command				
		startup_type				
		status_command			
		stop_command				
		supports						
		timeout							
		action :${4:nothing}	
	end

snippet windows_share
	# https://docs.chef.io/resources/windows_share
	windows_share '${1:name}' do
		ca_timeout						
		change_users					
		concurrent_user_limit 			
		continuously_available ${2:false}
		description								
		encrypt_data							
		full_users								
		path											
		read_users								
		scope_name "${3:*}"									
		share_name									
		temporary									
		action :${4:create}				
	end

snippet windows_shortcut
	# https://docs.chef.io/resources/windows_shortcut
	windows_shortcut '${1:name}' do
		arguments					
		cwd					 
		description				
		iconlocation			
		shortcut_name 
		target						
		action :${2:create}			
	end

snippet windows_task
	# https://docs.chef.io/resources/windows_task
	windows_task '${1:name}' do
		command "${3:ls -la}"														
		cwd																
		day																
		description												
		disallow_start_if_on_batteries ${4:false}			
		execution_time_limit							
		force	${5:false}															
		frequency														
		frequency_modifier									
		idle_time														
		interactive_enabled ${5:false}				
		minutes_duration									
		minutes_interval									
		months														
		password													
		priority														
		random_delay											
		run_level														
		start_day														
		start_time												
		start_when_available ${6:false}					
		stop_if_going_on_batteries ${7:false}		
		task_name														
		user																
		action :${3:create}											
	end

snippet windows_uac
	# https://docs.chef.io/resources/windows_uac
	windows_uac '${1:name}' do
		consent_behavior_admins				
		consent_behavior_users				
		detect_installers							
		enable_uac	${2:true}									
		prompt_on_secure_desktop	${3:true}		
		require_signed_binaries	${4:false}			
		action :${5:configure}									
	end

snippet windows_user_privilege
	# https://docs.chef.io/resources/windows_user_privilege
	windows_user_privilege '${1:name}' do
		principal 
		privilege 
		users		 
		action :${2:add}				
	end

snippet windows_workgroup
	# https://docs.chef.io/resources/windows_workgroup
	windows_workgroup '${1:name}' do
		password					
		reboot						
		user							
		workgroup_name		
		action :${2:join}				
	end

snippet yum_package
	# https://docs.chef.io/resources/yum_package
	yum_package '${1:name}' do
		allow_downgrade	${2:true}		
		arch					 
		flush_cache		 
		options				 
		package_name	 
		source				 
		timeout				 
		version				 
		yum_binary		 
		action :${3:install}	
	end

snippet yum_repository
	# https://docs.chef.io/resources/yum_repository
	yum_repository '${1:name}' do
		baseurl							 
		clean_metadata	${2:true}			
		cost								 
		description "${2:Yum Repository}"					 
		enabled	${3:true}							
		enablegroups				 
		exclude							 
		failovermethod			 
		fastestmirror_enabled 
		gpgcheck ${4:true}					
		gpgkey							 
		http_caching				 
		include_config			 
		includepkgs					 
		keepalive						 
		make_cache ${5:false}				
		max_retries					 
		metadata_expire			 
		metalink						 
		mirror_expire				 
		mirrorlist					 
		mirrorlist_expire		 
		mode								 
		options							 
		password						 
		priority						 
		proxy								 
		proxy_password			 
		proxy_username			 
		repo_gpgcheck				 
		report_instanceid		 
		reposdir "${6:/etc/yum.repos.d/}"						 
		repositoryid				 
		skip_if_unavailable	 
		source							 
		sslcacert						 
		sslclientcert				 
		sslclientkey				 
		sslverify						 
		throttle						 
		timeout							 
		username						 
		action :${7:create}					
	end

snippet zypper_package
	# https://docs.chef.io/resources/zypper_package
	zypper_package '${1:name}' do
		allow_downgrade	${2:false}	
		global_options 
		gpg_check			 
		options				 
		package_name	 
		source				 
		timeout				 
		version				 
		action :${2:install}	
	end

snippet zypper_repository
	# https://docs.chef.io/resources/zypper_repository
	zypper_repository '${1:name}' do
		autorefresh	${2:true}		  
		baseurl					 
		cookbook				 
		description			 
		enabled	${3:true}				  
		gpgautoimportkeys ${4:true}  
		gpgcheck ${5:true}				  
		gpgkey					 
		keeppackages ${6:false}		  
		mirrorlist			 
		mode						 
		path						 
		priority				 
		refresh_cache ${7:true}		  
		repo_name				 
		source					 
		type "${8:NONE}"						 
		action :${9:create}					  
	end
